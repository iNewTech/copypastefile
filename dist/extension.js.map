{
  "version": 3,
  "sources": ["../src/extension.ts", "../src/copy-file.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\nimport copyFile, {getTargetPath} from \"./copy-file\";\n\nexport function activate(context: vscode.ExtensionContext) {\n\n    vscode.window.showInformationMessage('Copy Paste File extension is ready!');\n    const disposable = vscode.commands.registerCommand('copypastefile.copyfile', async (uri: vscode.Uri) => {\n        if (!uri) {\n            vscode.window.showErrorMessage('Please select a file first');\n            return;\n        }\n        \n        try {\n            await copyFile(uri);\n        } catch (error: any) {\n            vscode.window.showErrorMessage(`Error: ${error.message}`);\n        }\n    });\n\n    context.subscriptions.push(disposable);\n\n    const copypaste = vscode.commands.registerCommand('copypastefile.copypaste', async (uri: vscode.Uri) => {\n        if (!uri) {\n            vscode.window.showErrorMessage('Please select a file first');\n            return;\n        }\n\n        try {\n            const targetPath = getTargetPath(uri.fsPath);\n            const content = await vscode.workspace.fs.readFile(uri);\n            await vscode.workspace.fs.writeFile(vscode.Uri.file(targetPath), content);\n            const doc = await vscode.workspace.openTextDocument(vscode.Uri.file(targetPath));\n            await vscode.window.showTextDocument(doc);\n        } catch (error: any) {\n            vscode.window.showErrorMessage(`Error: ${error.message}`);\n        }\n    });\n    context.subscriptions.push(copypaste);\n}\n\nexport function deactivate() {}\n", "import * as vscode from 'vscode';\nimport * as path from 'path';\nimport * as fs from \"fs\";\n\nexport default function copyFile(uri: vscode.Uri) {\n    \n    const baseFile = uri.fsPath;\n    const baseFileName = path.basename(baseFile);\n    const baseFileNameWithoutExt = path.basename(baseFile, path.extname(baseFile));\n    const baseFileDir = path.dirname(baseFile);\n    const baseFileContent = fs.readFileSync(baseFile, 'utf8');\n    const baseFileExt = path.extname(baseFileName);\n    vscode.window.showInputBox({\n        prompt: `Please enter new file name`,\n        value: baseFileName\n    }).then((newFileName) => {\n        if (newFileName === undefined) {\n            return;\n        } else if (newFileName === '') {\n            vscode.window.showErrorMessage(`Error: Blank file name not allowed`);\n            return;\n        } else if (newFileName === baseFileName || newFileName === baseFileNameWithoutExt) {\n            vscode.window.showErrorMessage(`Error: New file name cannot be same as old file name - ${newFileName}`);\n            newFileName = newFileName + '_copy';\n        } else {\n            // Preserve the original file extension if not already included\n            if (!newFileName.includes('.')) {\n                newFileName = newFileName + baseFileExt;\n            }\n        }\n        const newFilePath = path.join(baseFileDir, newFileName);\n        fs.writeFileSync(newFilePath, baseFileContent);\n        vscode.workspace.openTextDocument(newFilePath).then(doc => {\n            vscode.window.showTextDocument(doc);\n        });\n    });\n}\n\nexport function getTargetPath(sourcePath: string): string {\n    const dir = path.dirname(sourcePath);\n    const ext = path.extname(sourcePath);\n    const base = path.basename(sourcePath, ext);\n    let counter = 1;\n    let targetPath: string;\n\n    do {\n        targetPath = path.join(dir, `${base}_copy_${counter}${ext}`);\n        counter++;\n    } while (fs.existsSync(targetPath));\n\n    return targetPath;\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,UAAwB;;;ACAxB,aAAwB;AACxB,WAAsB;AACtB,SAAoB;AAEL,SAAR,SAA0B,KAAiB;AAE9C,QAAM,WAAW,IAAI;AACrB,QAAM,eAAoB,cAAS,QAAQ;AAC3C,QAAM,yBAA8B,cAAS,UAAe,aAAQ,QAAQ,CAAC;AAC7E,QAAM,cAAmB,aAAQ,QAAQ;AACzC,QAAM,kBAAqB,gBAAa,UAAU,MAAM;AACxD,QAAM,cAAmB,aAAQ,YAAY;AAC7C,EAAO,cAAO,aAAa;AAAA,IACvB,QAAQ;AAAA,IACR,OAAO;AAAA,EACX,CAAC,EAAE,KAAK,CAAC,gBAAgB;AACrB,QAAI,gBAAgB,QAAW;AAC3B;AAAA,IACJ,WAAW,gBAAgB,IAAI;AAC3B,MAAO,cAAO,iBAAiB,oCAAoC;AACnE;AAAA,IACJ,WAAW,gBAAgB,gBAAgB,gBAAgB,wBAAwB;AAC/E,MAAO,cAAO,iBAAiB,0DAA0D,WAAW,EAAE;AACtG,oBAAc,cAAc;AAAA,IAChC,OAAO;AAEH,UAAI,CAAC,YAAY,SAAS,GAAG,GAAG;AAC5B,sBAAc,cAAc;AAAA,MAChC;AAAA,IACJ;AACA,UAAM,cAAmB,UAAK,aAAa,WAAW;AACtD,IAAG,iBAAc,aAAa,eAAe;AAC7C,IAAO,iBAAU,iBAAiB,WAAW,EAAE,KAAK,SAAO;AACvD,MAAO,cAAO,iBAAiB,GAAG;AAAA,IACtC,CAAC;AAAA,EACL,CAAC;AACL;AAEO,SAAS,cAAc,YAA4B;AACtD,QAAM,MAAW,aAAQ,UAAU;AACnC,QAAM,MAAW,aAAQ,UAAU;AACnC,QAAM,OAAY,cAAS,YAAY,GAAG;AAC1C,MAAI,UAAU;AACd,MAAI;AAEJ,KAAG;AACC,iBAAkB,UAAK,KAAK,GAAG,IAAI,SAAS,OAAO,GAAG,GAAG,EAAE;AAC3D;AAAA,EACJ,SAAY,cAAW,UAAU;AAEjC,SAAO;AACX;;;ADhDO,SAAS,SAAS,SAAkC;AAEvD,EAAO,eAAO,uBAAuB,qCAAqC;AAC1E,QAAM,aAAoB,iBAAS,gBAAgB,0BAA0B,OAAO,QAAoB;AACpG,QAAI,CAAC,KAAK;AACN,MAAO,eAAO,iBAAiB,4BAA4B;AAC3D;AAAA,IACJ;AAEA,QAAI;AACA,YAAM,SAAS,GAAG;AAAA,IACtB,SAAS,OAAY;AACjB,MAAO,eAAO,iBAAiB,UAAU,MAAM,OAAO,EAAE;AAAA,IAC5D;AAAA,EACJ,CAAC;AAED,UAAQ,cAAc,KAAK,UAAU;AAErC,QAAM,YAAmB,iBAAS,gBAAgB,2BAA2B,OAAO,QAAoB;AACpG,QAAI,CAAC,KAAK;AACN,MAAO,eAAO,iBAAiB,4BAA4B;AAC3D;AAAA,IACJ;AAEA,QAAI;AACA,YAAM,aAAa,cAAc,IAAI,MAAM;AAC3C,YAAM,UAAU,MAAa,kBAAU,GAAG,SAAS,GAAG;AACtD,YAAa,kBAAU,GAAG,UAAiB,YAAI,KAAK,UAAU,GAAG,OAAO;AACxE,YAAM,MAAM,MAAa,kBAAU,iBAAwB,YAAI,KAAK,UAAU,CAAC;AAC/E,YAAa,eAAO,iBAAiB,GAAG;AAAA,IAC5C,SAAS,OAAY;AACjB,MAAO,eAAO,iBAAiB,UAAU,MAAM,OAAO,EAAE;AAAA,IAC5D;AAAA,EACJ,CAAC;AACD,UAAQ,cAAc,KAAK,SAAS;AACxC;AAEO,SAAS,aAAa;AAAC;",
  "names": ["vscode"]
}
